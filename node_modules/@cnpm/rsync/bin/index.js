#!/usr/bin/env node

/**
 * 本地文件同步到指定服务器目录功能脚本
 * @param {String} -from 本地需要同步的路径，默认当前项目 /dist/ 目录
 * @param {String} -to 同步到服务器项目位置，默认为/application/search/www/当前项目名称html/dist/
 * @param {String} -host 服务器的 host，默认 10.10.128.98
 * @param {String} -rsa 用户秘钥配置文件路径，默认为当前用户 home 目录
 */


var fs = require('fs');
var path = require('path');
var readline = require('readline');
var client = require('scp2');
var os = require('os');
var util = require('util');

var debuglog = util.debuglog('log');
var argv = process.argv.splice(2);

/** 本地需要同步的路径 */
var from;
/** 同步到服务器的路径 */
var to;
/** 同步到服务器的 host，默认 = '10.10.128.98' */
var host;
/** 用户本地 token 文件路径 */
var userIdRsa;
var rsa = [];
var rl;
var cwd = process.cwd();

/**
 * 获得当前项目名称
 * 提供默认同步服务器项目地址
 */
var getProjectName = function getProjectName() {
  var index = cwd.lastIndexOf(path.sep);
  return cwd.substring(index + 1);
};

/**
 * 终端命令参数对象
 * 提供默认的参数值设置
 * 规定命令传递参数模式
 */
var paramsObject = {
  from: 'dist',
  to: getProjectName() + 'html/dist/',
  host: '10.10.128.98',
  rsa: os.homedir(),
};
/**
 * 处理执行命令传递的参数
 * 根据 paramsObject 对象限定参数名称
 * 设置对象 key = value 值
 * @param {Array} arr 命令行传递的参数
 */
var getParamsObject = function getParamsObject(arr) {
  var key;
  var obj = {};
  arr.map(function (item) {
    // 去掉前后空格，避免命令行输入多余空白符
    var val = item.trim();
    // 获得传递参数名标识，判断当前循环项是否为参数值
    var index = val.indexOf('-');
    // 参数名称临时变量
    var name;
    if (index !== -1) {
      // 为参数名称时截取标识
      name = val.substring(index + 1);
      // 判断当前参数名是否在参数对象模式内
      if (paramsObject[name]) {
        // 赋值缓存对象 key，用于在下次循环赋值
        key = name;
        return val;
      }
    }
    // 给参数名称赋值
    obj[key] = val;
    return val;
  });
  debuglog('obj', obj);
  return obj;
};
// 复写命令行参数对象属性
paramsObject = Object.assign(paramsObject, getParamsObject(argv));

userIdRsa = path.join(paramsObject.rsa, '/user_id_rsa');
from = path.join(cwd, paramsObject.from);
to = path.join('/application/search/www/', paramsObject.to);
host = paramsObject.host;
debuglog('paramsObject', paramsObject);

// 创建按行读取对象
rl = readline.createInterface({
  input: fs.createReadStream(userIdRsa, 'utf-8')
});
rl.on('line', function (line) {
  rsa.push(line);
}).on('close', function () {
  // 获得用户服务器秘钥以及登录密码
  var privateKeyPath;
  if (!rsa.length) {
    throw new Error('无法读取密钥配置');
  }
  privateKeyPath = rsa[0];
  if (!path.isAbsolute(privateKeyPath)) {
    privateKeyPath = path.join(cwd, privateKeyPath);
  }
  // scp 文件到指定服务器
  client.scp(from, {
    port: 22,
    host: host,
    username: 'search',
    privateKey: fs.readFileSync(privateKeyPath),
    passphrase: rsa[1],
    path: to,
  }, function (err) {
    if (err) {
      throw err;
    }
    console.log('%s => %s:%s', from, host, to);
    console.log('\x1B[32m%s\x1B[0m', '\n同步完成\n');
  });
});
