/**
 * javascript 中全类型定义
 */
var Class2type = {
  '[object Array]': 'array',
  '[object Boolean]': 'boolean',
  '[object Date]': 'date',
  '[object Error]': 'error',
  '[object Function]': 'function',
  '[object Number]': 'number',
  '[object Object]': 'object',
  '[object RegExp]': 'regexp',
  '[object String]': 'string'
};
var CORE_TOSTRING = Class2type.toString;
var CORE_HASOWN = Class2type.hasOwnProperty;

/**
 * 工具类，提供基础功能操作
 */
var Util = {

  /**
   * 扩展对象方法与属性
   */
  extend: function extend() {
    var T = this;
    var options; var name; var src;
    var copy; var copyIsArray; var clone;
    var target = arguments[0] || {};
    var i = 1;
    var length = arguments.length;
    var deep = false;
    if (typeof target === 'boolean') {
      deep = target;
      target = arguments[1] || {};
      i = 2;
    }
    if (typeof target !== 'object' && !T.isFunction(target)) {
      target = {};
    }
    if (length === i) {
      target = this;
      i -= 1;
    }
    for (; i < length; i += 1) {
      options = arguments[i];
      if (options !== null) {
        for (name in options) {
          if (Object.prototype.hasOwnProperty.call(options, name)) {
            src = target[name];
            copy = options[name];
            if (target !== copy) {
              copyIsArray = T.isArray(copy);
              if (deep && copy && (T.isPlainObject(copy) || copyIsArray)) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && T.isArray(src) ? src : [];
                } else {
                  clone = src && T.isPlainObject(src) ? src : {};
                }
                target[name] = T.extend(deep, clone, copy);
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
      }
    }
    return target;
  },

  /**
   * 判断是否是 Function
   */
  isFunction: function isFunction(obj) {
    return this.type(obj) === 'function';
  },
  /**
   * 如果传递的是字符类型，则通过 Function 转换成为 JavaScript 对象
   */
  reType: function reType(variable) {
    if (this.type(variable) === 'string') {
      try {
        /*eslint no-new-func: "warn"*/
        return (new Function('return ' + variable))();
      } catch (e) {
        //
      }
    }
    return variable;
  },

  /**
   * 获得对象类型
   */
  type: function type(obj) {
    if (obj === null) {
      return String(obj);
    }
    return typeof obj === 'object' || typeof obj === 'function' ?
      Class2type[CORE_TOSTRING.call(obj)] || 'object' : typeof obj;
  },
  isPlainObject: function isPlainObject(obj) {
    var T = this;
    var key;
    if (!obj || T.type(obj) !== 'object' ||
      obj.nodeType || T.isWindow(obj)) {
      return false;
    }
    try {
      if (obj.constructor && !CORE_HASOWN.call(obj, 'constructor') &&
        !CORE_HASOWN.call(obj.constructor.prototype,
          'isPrototypeOf')) {
        return false;
      }
    } catch (e) {
      return false;
    }
    for (key in obj) {
      // console.log(key);
    }
    return key === undefined || CORE_HASOWN.call(obj, key);
  },
  isWindow: function isWindow(obj) {
    return obj !== null && obj === obj.window;
  },

  /**
   * 判断是否时数组
   */
  isArray: function isArray(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  },

  /**
   * 判断是否时时间类型
   */
  isDate: function isDate(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
  },

  /**
   * 去除字符的前后空格
   */
  trim: function trim(str) {
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },

  /**
   * 获得当前执行 JS 文件 src
   */
  getScriptAbsoluteSrc: function getScriptAbsoluteSrc() {
    var script = document.scripts;
    var node = script[script.length - 1];
    if (node.hasAttribute) {
      return node.src;
    }

    // http://msdn.microsoft.com/en-us/library/ms536429(VS.85).aspx
    return node.getAttribute('src', 4);
  },

  /**
   * 获得当前执行 JS 文件的上级目录
   */
  getScriptAbsoluteDir: function getScriptAbsoluteDir() {
    return this.getScriptAbsoluteSrc().match(/[^?#]*\//)[0];
  }
};
module.exports = Util;
