/**
 * webpack 基础配置套件
 * 包含最基本的 load、plugin
 * 使用者可以复写和增加配置内容
 * loader: {
 *  style-loader
 *  css-loader
 *  file-loader
 *  url-loader
 *
 *  // prod 环境
 *  @cnpm/try-catch-loader
 * }
 * plugins: {
 *  extract-text-webpack-plugin
 *  file-version-webpack-plugin
 *  clean-webpack-plugin
 *  webpack.BannerPlugin
 *  es3ify-webpack-plugin
 *
 *  // prod 环境包含
 *  webpack.optimize.ModuleConcatenationPlugin
 *  webpack.HashedModuleIdsPlugin
 *  uglifyjs-webpack-plugin
 * }
 *
 * 环境判断使用 webpack CLI 参数 （env.prod|env.local）
 */
var path = require('path');
var webpack = require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var UglifyJSPlugin = require('uglifyjs-webpack-plugin');
var FileVersionPlugin = require('file-version-webpack-plugin');
var CleanWebpackPlugin = require('clean-webpack-plugin');
var Es3ifyPlugin = require('es3ify-webpack-plugin');

/**
 * 当 publicPath 没有传递值时，通过 distPath 值处理成前后 '/' 开始结束的形式
 * @param {String} distPath distPath 值
 */
function getPublicPath(distPath) {
  var reDist = distPath;
  // var reDist = path.resolve(distPath);
  // return reDist.substring(process.cwd().length);
  var start = distPath.indexOf('/');
  var end = distPath.lastIndexOf('/');
  if (start < end) {
    reDist = distPath.substring(start, end + 1);
  }
  return reDist;
}

module.exports = function exports(env, distPath, publicPath) {
  var cwd = process.cwd();
  var plugins;
  var rules; var devtool = 'eval';
  var dist = distPath || './static/dist/';
  var projectDistPath = path.join(cwd, dist);
  var projectENV = env || {local: true};
  var projectPublicPath = publicPath || getPublicPath(dist);

  rules = [{
    test: /\.css$/,
    loader: ExtractTextPlugin.extract({
      fallback: 'style-loader',
      use: [{
        loader: 'css-loader',
        query: {
          sourceMap: true,
          minimize: projectENV.prod ?
            {
              minifyFontValues: {
                removeQuotes: false
              }
            } :
            false
        }
      }]
    }),
    // exclude: /node_modules/,
  }, {
    test: /\.(png|jpe?g|gif)$/,
    use: [{
      loader: 'file-loader',
      query: {
        publicPath: './',
        name: '[name]-[hash:base64:7].[ext]',
      }
    }],
    // exclude: /node_modules/,
  }, {
    test: /\.(ttf|eot|svg|woff2?)?$/,
    use: [{
      loader: 'url-loader',
      query: {
        limit: 10000,
        name: '[name]-[hash:base64:7].[ext]',
      }
    }],
    // exclude: /node_modules/,
  }];

  plugins = [
    new CleanWebpackPlugin(projectDistPath, {
      root: path.resolve(projectDistPath, '../'),
      verbose: true
    }),
    new ExtractTextPlugin({
      filename: '[name].css',
      allChunks: true,
    }),
    new FileVersionPlugin(),
  ];
  plugins.push(
    new Es3ifyPlugin()
  );
  console.log('Project ENV: \x1B[32m%s\x1B[0m', (projectENV.prod || projectENV.local));

  if (projectENV.prod) {
    rules.push({
      test: /\.js$/,
      use: [{
        loader: '@cnpm/try-catch-loader',
        options: {
          trycatchHandler: 'throw Error(e); window.CatchSendError && window.CatchSendError(e);',
        }
      }]
    });
    plugins.push(
      new webpack.optimize.ModuleConcatenationPlugin()
    );
    plugins.push(
      new webpack.HashedModuleIdsPlugin({
        hashFunction: 'sha256',
        hashDigest: 'hex',
        hashDigestLength: 20
      })
    );
    plugins.push(
      new UglifyJSPlugin({
        uglifyOptions: {
          ie8: true,
          compress: {
            drop_console: true,
            // warnings: false,
          },
          output: {
            ascii_only: true,
            // quote_keys: true,
          },
        },
        sourceMap: true,
      })
    );
    devtool = 'source-map';
  }
  plugins.push(
    new webpack.BannerPlugin({
      banner: 'Date:' + new Date() + ', chunkhash:[chunkhash]',
    })
  );

  return {
    devtool: devtool,
    entry: {},
    output: {
      path: projectDistPath,
      filename: '[name].js',
      publicPath: projectPublicPath,
    },
    // 引用外部 jQuery
    externals: {
      jquery: 'window.jQuery'
    },
    plugins: plugins,
    module: {
      rules: rules,
    }
  };
};
